USE SENAI_HCURSOS_TARDE;

--Insere um novo registro na linha passando as colunas e valores
INSERT INTO CATEGORIAS (NOME)
VALUES ('Desenvolvimento')

--Insere um novo registro pela ordem das colunas
INSERT INTO CATEGORIAS
VALUES ('Informática')

INSERT INTO CATEGORIAS (NOME)
VALUES ('Design'),('Marketing')

INSERT INTO CATEGORIAS
VALUES ('Gestão')

----------

--Seleciona campoS tabela categorias
--Lista todos os registros e campos da tabela categorias
SELECT * FROM CATEGORIAS

--Lista todos os regitros somente o campo "nome" da tabela "categorias"
SELECT NOME FROM CATEGORIAS
SELECT NOME AS LARANJA FROM CATEGORIAS

--Ordena pelo campo ID em ordem crescente
SELECT * FROM CATEGORIAS ORDER BY ID ASC
--Ordena pelo campo Nome em ordem decrescente
SELECT * FROM CATEGORIAS ORDER BY NOME DESC


--Filtrando pelo Id
SELECT * FROM CATEGORIAS WHERE ID = 3

SELECT * FROM CATEGORIAS WHERE ID = 4 AND ID = 1

SELECT * FROM CATEGORIAS WHERE ID = 4 OR ID = 1

--like == contains, contém
SELECT * FROM CATEGORIAS WHERE NOME LIKE '%e%'
SELECT * FROM CATEGORIAS WHERE NOME LIKE 'D%'
SELECT * FROM CATEGORIAS WHERE NOME LIKE '%a'

----------

SELECT * FROM CATEGORIAS WHERE ID >= 2
SELECT * FROM CATEGORIAS WHERE ID >= 2 AND ID < 5
SELECT * FROM CATEGORIAS WHERE ID BETWEEN 2 AND 5 --Inclui o 2 e o 7 // == "ID BETWEEN 3 AND 4"
SELECT * FROM CATEGORIAS WHERE ID = 3 OR ID = 4 OR ID = 5
SELECT * FROM CATEGORIAS WHERE ID IN (1,3,5) AND NOME LIKE 'D%'

--Filtrar pelas duas linhas
SELECT TOP 2 * FROM CATEGORIAS --primeiras
SELECT TOP 2 * FROM CATEGORIAS ORDER BY ID DESC --últimas

SELECT COUNT (*) FROM CATEGORIAS
SELECT COUNT (*) AS QUANTIDADE_TOTAL_REGISTRO FROM CATEGORIAS

--Filtrar todos os registro menos o "3"
SELECT * FROM CATEGORIAS WHERE NOT ID = 3
SELECT * FROM CATEGORIAS WHERE ID <> 3

----------

UPDATE CATEGORIAS SET NOME = 'Outros' WHERE ID = 4

----------

DELETE FROM CATEGORIAS WHERE ID = 4


----------ATIVIDADE COM A TABELA "ALUNOS"----------

INSERT INTO ALUNOS (NOME)
VALUES ('Cândida'),('Eryk'),('João'),('Paloma'),('Aline'),('Gabriel')

-- '*' serve para incluir todos os campos / selecionar todas as colunas

SELECT * FROM ALUNOS

SELECT * FROM ALUNOS WHERE NOME = 'Cândida'
--SELECT * FROM ALUNOS WHERE NOME LIKE 'Cândida'

SELECT * FROM ALUNOS WHERE NOME LIKE '%i%'

SELECT * FROM ALUNOS WHERE NOME LIKE 'C%'

SELECT * FROM ALUNOS WHERE NOME LIKE '%a' OR NOME LIKE '%o'
SELECT * FROM ALUNOS WHERE NOME LIKE '%[a,o]'

SELECT * FROM ALUNOS WHERE ID BETWEEN 3 AND 5

SELECT * FROM ALUNOS ORDER BY NOME ASC

SELECT COUNT (*) AS QUANTIDADE FROM ALUNOS

UPDATE ALUNOS SET NOME = 'Gabriel Iwazazki' WHERE ID = 6
--UPDATE ALUNOS SET NOME = 'Gabriel Iwazazki' WHERE NOME = 'Gabriel'

DELETE FROM ALUNOS WHERE ID = 3


----------ATIVIDADE COM A TABELA "PROFESSORES"----------


INSERT INTO PROFESSORES (NOME)
VALUES ('Fernando'),('Helena'),('Possarle'),('Raquel')

SELECT * FROM PROFESSORES

--DDL -> Definição - modelagem
--DML -> Manipuação - insert, update, delete
--DQL -> Query - select

DBCC CHECKIDENT('CATEGORIAS', RESEED, 0)
DELETE FROM CATEGORIAS

DBCC CHECKIDENT('ALUNOS', RESEED, 0)
DELETE FROM ALUNOS

DBCC CHECKIDENT('PROFESSORES', RESEED, 0)
DELETE FROM PROFESSORES


----------ATIVIDADE COM A TABELA "CURSOS"----------

DBCC CHECKIDENT('CURSOS', RESEED, 0)
DELETE FROM CURSOS

INSERT INTO CURSOS (NOME, TITULO, ID_CATEGORIA, ID_PROFESSOR)
VALUES ('SQL', 'SQL BÁSICO - PARTE 1', '1', '1')
		,('SQL', 'SQL BÁSICO - PARTE 2', '1', '1')
		,('JAVA', 'JAVA BÁSICO - PARTE 2', '1', '2')
		,('REACT', 'REACT NATIVE - PARTE 1', '1', '2')
		,('GESTÃO', 'GESTÃO DE PESSOAS', '5', '3')

SELECT * FROM CURSOS



/*
Intersecção:
SELECT * FROM
	CURSOS, PROFESSORES
WHERE
	CURSOS.ID_PROFESSOR = PROFESSORES.ID
*/

/*
SELECT CURSOS.NOME AS NOME_CURSOS, TITULO, PROFESSORES.NOME AS NOME_PROFESSOR FROM
	CURSOS INNER JOIN PROFESSORES
ON
	CURSOS.ID_PROFESSOR = PROFESSORES.ID


SELECT C.NOME AS NOME_CURSOS, TITULO, P.NOME AS NOME_PROFESSOR FROM
	CURSOS AS C INNER JOIN PROFESSORES AS P
ON
	C.ID_PROFESSOR = P.ID
*/

--Intersecção entre tabelas Cursos e Professores

SELECT C.NOME AS NOME_CURSOS, TITULO, P.NOME AS NOME_PROFESSOR FROM
	CURSOS C INNER JOIN PROFESSORES P
ON
	C.ID_PROFESSOR = P.ID
AND -- WHERE
	C.NOME = 'SQL'

--Retorna os professores (tabela da direita) mesmo não tendo cursos

-- C = Cursos
-- P = Professores

SELECT C.NOME AS NOME_CURSOS, TITULO, P.NOME AS NOME_PROFESSOR FROM
	CURSOS C RIGHT JOIN PROFESSORES P
ON
	C.ID_PROFESSOR = P.ID

--Retorna os cursos (tabela da esquerda) mesmo não tendo professores

SELECT C.NOME AS NOME_CURSOS, TITULO, P.NOME AS NOME_PROFESSOR FROM
	 CURSOS C LEFT JOIN PROFESSORES P
ON
	C.ID_PROFESSOR = P.ID




----------ATIVIDADE COM  CURSOS E CATEGORIAS----------

--Exercício 1

SELECT CURSOS. *, CATEGORIAS.NOME AS NOMES_CATEGORIAS FROM
	CURSOS INNER JOIN CATEGORIAS
ON
	CURSOS.ID_CATEGORIA = CATEGORIAS.ID

--Exercício 2

SELECT CURSOS. *, CATEGORIAS.NOME AS NOMES_CATEGORIAS FROM
	CURSOS LEFT JOIN CATEGORIAS
ON
	CURSOS.ID_CATEGORIA = CATEGORIAS.ID

--Exercício 3

SELECT CURSOS. *, CATEGORIAS.NOME AS NOMES_CATEGORIAS FROM
	CURSOS RIGHT JOIN CATEGORIAS
ON
	CURSOS.ID_CATEGORIA = CATEGORIAS.ID

--Exercício 4

SELECT CATEGORIAS.NOME AS NOMES_CATEGORIAS, CURSOS. * FROM
	CATEGORIAS LEFT JOIN CURSOS
ON
	CATEGORIAS.ID = CURSOS.ID_CATEGORIA -- a ordem só necessita mudar essa linha

--Exercício 5

SELECT CATEGORIAS.NOME AS NOMES_CATEGORIAS, CURSOS. * FROM
	CATEGORIAS RIGHT JOIN CURSOS
ON
	CATEGORIAS.ID = CURSOS.ID_CATEGORIA
